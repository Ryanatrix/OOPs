import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.*;

abstract class AbstractDietPlan {
    public abstract String suggestDiet(int cycleDay, String preference, int painLevel, int hungerLevel, int exhaustionLevel, Set<String> allergies, Set<String> dislikes);
}

interface DietRecommendation {
    String suggestDiet(int cycleDay, String preference, int painLevel, int hungerLevel, int exhaustionLevel, Set<String> allergies, Set<String> dislikes);
}

class CyclePhase {
    public static String getCyclePhase(int day) {
        if (day >= 1 && day <= 5) return "Menstrual Phase";
        if (day >= 6 && day <= 14) return "Follicular Phase";
        if (day >= 15 && day <= 17) return "Ovulation Phase";
        return "Luteal Phase";
    }
}

class DietPlan extends AbstractDietPlan implements DietRecommendation {
    @Override
    public String suggestDiet(int cycleDay, String preference, int painLevel, int hungerLevel, int exhaustionLevel, Set<String> allergies, Set<String> dislikes) {
        String phase = CyclePhase.getCyclePhase(cycleDay);
        List<String> foods = new ArrayList<>();
        
        if (preference.equalsIgnoreCase("Vegetarian")) {
            switch (phase) {
                case "Menstrual Phase": 
                    foods.addAll(Arrays.asList("spinach", "lentils", "almonds", "tofu", "warm soups"));
                    if (painLevel > 5) foods.add("turmeric tea");
                    if (hungerLevel > 5) foods.add("quinoa");
                    if (exhaustionLevel > 5) foods.add("oatmeal");
                    break;
                case "Follicular Phase": 
                    foods.addAll(Arrays.asList("protein-rich foods", "nuts", "yogurt", "avocados"));
                    if (painLevel > 5) foods.add("ginger tea");
                    if (hungerLevel > 5) foods.add("hummus");
                    if (exhaustionLevel > 5) foods.add("smoothies");
                    break;
                case "Ovulation Phase": 
                    foods.addAll(Arrays.asList("leafy greens", "berries", "seeds", "whole grains"));
                    if (painLevel > 5) foods.add("green tea");
                    if (hungerLevel > 5) foods.add("chia pudding");
                    if (exhaustionLevel > 5) foods.add("energy bars");
                    break;
                case "Luteal Phase": 
                    foods.addAll(Arrays.asList("bananas", "dark chocolate", "chickpeas"));
                    if (painLevel > 5) foods.add("peppermint tea");
                    if (hungerLevel > 5) foods.add("sweet potatoes");
                    if (exhaustionLevel > 5) foods.add("walnuts");
                    break;
            }
        } else {
            switch (phase) {
                case "Menstrual Phase": 
                    foods.addAll(Arrays.asList("red meat", "eggs", "chicken", "bone broth"));
                    if (painLevel > 5) foods.add("turmeric tea");
                    if (hungerLevel > 5) foods.add("quinoa");
                    if (exhaustionLevel > 5) foods.add("oatmeal");
                    break;
                case "Follicular Phase": 
                    foods.addAll(Arrays.asList("lean meats", "fish", "eggs", "dairy"));
                    if (painLevel > 5) foods.add("ginger tea");
                    if (hungerLevel > 5) foods.add("hummus");
                    if (exhaustionLevel > 5) foods.add("smoothies");
                    break;
                case "Ovulation Phase": 
                    foods.addAll(Arrays.asList("salmon", "tuna", "nuts", "lean protein"));
                    if (painLevel > 5) foods.add("green tea");
                    if (hungerLevel > 5) foods.add("chia pudding");
                    if (exhaustionLevel > 5) foods.add("energy bars");
                    break;
                case "Luteal Phase": 
                    foods.addAll(Arrays.asList("turkey", "chicken", "whole grains"));
                    if (painLevel > 5) foods.add("peppermint tea");
                    if (hungerLevel > 5) foods.add("sweet potatoes");
                    if (exhaustionLevel > 5) foods.add("walnuts");
                    break;
            }
        }
        foods.removeAll(allergies);
        foods.removeAll(dislikes);
        return "Recommended Foods: " + String.join(", ", foods);
    }
}

public class CycleSyncApplet extends JApplet implements ActionListener {
    private JTextField nameField, dateField, cycleField, painField, hungerField, exhaustionField;
    private JComboBox<String> dietChoice;
    private JTextArea resultArea;
    private JButton submitButton, clearButton;
    private DietPlan dietPlan;
    
    private JCheckBox[] symptomCheckboxes;
    private JCheckBox[] allergyCheckboxes;
    private JCheckBox[] dislikeCheckboxes;

    @Override
    public void init() {
        setSize(500, 600);
        setLayout(new GridLayout(14, 2));
        
        dietPlan = new DietPlan();
        
        add(new JLabel("Name:"));
        nameField = new JTextField();
        add(nameField);
        
        add(new JLabel("Last Period Start Date (YYYY-MM-DD):"));
        dateField = new JTextField();
        add(dateField);
        
        add(new JLabel("Cycle Length (days):"));
        cycleField = new JTextField();
        add(cycleField);
        
        add(new JLabel("Diet Preference:"));
        dietChoice = new JComboBox<>(new String[]{"Vegetarian", "Non-Vegetarian"});
        add(dietChoice);
        
        add(new JLabel("Pain Level (1-10):"));
        painField = new JTextField();
        add(painField);
        
        add(new JLabel("Hunger Level (1-10):"));
        hungerField = new JTextField();
        add(hungerField);
        
        add(new JLabel("Exhaustion Level (1-10):"));
        exhaustionField = new JTextField();
        add(exhaustionField);
        
        add(new JLabel("Symptoms:"));
        JPanel symptomsPanel = new JPanel();
        symptomsPanel.setLayout(new GridLayout(5, 1));
        String[] symptoms = {"Cramps", "Headache", "Bloating", "Mood Swings", "Fatigue"};
        symptomCheckboxes = new JCheckBox[symptoms.length];
        for (int i = 0; i < symptoms.length; i++) {
            symptomCheckboxes[i] = new JCheckBox(symptoms[i]);
            symptomsPanel.add(symptomCheckboxes[i]);
        }
        add(symptomsPanel);
        
        add(new JLabel("Allergies:"));
        JPanel allergiesPanel = new JPanel();
        allergiesPanel.setLayout(new GridLayout(5, 1));
        String[] allergies = {"Nuts", "Dairy", "Gluten", "Soy", "Seafood"};
        allergyCheckboxes = new JCheckBox[allergies.length];
        for (int i = 0; i < allergies.length; i++) {
            allergyCheckboxes[i] = new JCheckBox(allergies[i]);
            allergiesPanel.add(allergyCheckboxes[i]);
        }
        add(allergiesPanel);
        
        add(new JLabel("Disliked Foods:"));
        JPanel dislikesPanel = new JPanel();
        dislikesPanel.setLayout(new GridLayout(5, 1));
        String[] dislikes = {"Broccoli", "Brussels Sprouts", "Eggplant", "Mushrooms", "Spinach"};
        dislikeCheckboxes = new JCheckBox[dislikes.length];
        for (int i = 0; i < dislikes.length; i++) {
            dislikeCheckboxes[i] = new JCheckBox(dislikes[i]);
            dislikesPanel.add(dislikeCheckboxes[i]);
        }
        add(dislikesPanel);
        
        submitButton = new JButton("Get Recommendations");
        submitButton.addActionListener(this);
        add(submitButton);
        
        clearButton = new JButton("Clear");
        clearButton.addActionListener(this);
        add(clearButton);
        
        resultArea = new JTextArea();
        resultArea.setEditable(false);
        add(new JLabel("Recommendations:"));
        add(new JScrollPane(resultArea));
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == submitButton) {
            LocalDate lastPeriod = LocalDate.parse(dateField.getText());
            int cycleLength = Integer.parseInt(cycleField.getText());
            String dietPreference = (String) dietChoice.getSelectedItem();
            int painLevel = Integer.parseInt(painField.getText());
            int hungerLevel = Integer.parseInt(hungerField.getText());
            int exhaustionLevel = Integer.parseInt(exhaustionField.getText());
            
            Set<String> selectedSymptoms = new HashSet<>();
            for (JCheckBox checkbox : symptomCheckboxes) {
                if (checkbox.isSelected()) {
                    selectedSymptoms.add(checkbox.getText());
                }
            }
            
            Set<String> selectedAllergies = new HashSet<>();
            for (JCheckBox checkbox : allergyCheckboxes) {
                if (checkbox.isSelected()) {
                    selectedAllergies.add(checkbox.getText());
                }
            }
            
            Set<String> selectedDislikes = new HashSet<>();
            for (JCheckBox checkbox : dislikeCheckboxes) {
                if (checkbox.isSelected()) {
                    selectedDislikes.add(checkbox.getText());
                }
            }
            
            int cycleDay = (int) ChronoUnit.DAYS.between(lastPeriod, LocalDate.now()) % cycleLength + 1;
            String recommendation = dietPlan.suggestDiet(cycleDay, dietPreference, painLevel, hungerLevel, exhaustionLevel, selectedAllergies, selectedDislikes);
            resultArea.setText(recommendation);
        } else if (e.getSource() == clearButton) {
            nameField.setText("");
            dateField.setText("");
            cycleField.setText("");
            painField.setText("");
            hungerField.setText("");
            exhaustionField.setText("");
            for (JCheckBox checkbox : symptomCheckboxes) {
                checkbox.setSelected(false);
            }
            for (JCheckBox checkbox : allergyCheckboxes) {
                checkbox.setSelected(false);
            }
            for (JCheckBox checkbox : dislikeCheckboxes) {
                checkbox.setSelected(false);
            }
            resultArea.setText("");
        }
    }
    
    public static void main(String[] args) {
        JFrame frame = new JFrame("Menstrual Diet Recommendation");
        CycleSyncApplet applet = new CycleSyncApplet();
        frame.add(applet);
        frame.setSize(500, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        applet.init();
        applet.start();
        frame.setVisible(true);
    }
}   
